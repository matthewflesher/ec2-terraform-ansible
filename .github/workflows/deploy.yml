name: Deploy Selenium Grid

on:
  workflow_dispatch:

concurrency:
  group: terraform-selenium
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Validate
        run: terraform -chdir=terraform validate

      - name: Write tfvars with SSH keys
        run: |
          echo "ssh_public_key = \"${{ secrets.SSH_PUBLIC_KEY }}\"" > terraform/terraform.tfvars
          echo 'ssh_private_key = <<EOKEY' >> terraform/terraform.tfvars
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" >> terraform/terraform.tfvars
          echo 'EOKEY' >> terraform/terraform.tfvars

      - name: Terraform Plan
        run: terraform -chdir=terraform plan -var-file=terraform.tfvars

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Extract EC2 Master Info to JSON
        run: |
          cd ../../terraform
          echo '{' > master_info.json
          echo '"master_public_ip": "'$(terraform output -raw master_public_ip)'",' >> master_info.json
          echo '"master_public_dns": "'$(terraform output -raw master_public_dns)'"' >> master_info.json
          echo '}' >> master_info.json
      
      - name: Upload Master Info JSON to S3
        run: |
          aws s3 cp master_info.json s3://bddfeatures/master_info.json
        env:
          AWS_REGION: us-east-1  

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible sshpass

      - name: Create inventory file
        run: |
          # Fetch IP addresses from Terraform outputs
          MASTER_IP=$(terraform -chdir=terraform output -raw master_public_ip)
          WORKER_1_IP=$(terraform -chdir=terraform output -raw worker_1_public_ip)
          WORKER_2_IP=$(terraform -chdir=terraform output -raw worker_2_public_ip)

          # Create the Ansible inventory file
          cat <<EOF > ansible/inventory.ini
          [masters]
          k8s-master ansible_host=$MASTER_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa

          [workers]
          k8s-worker-1 ansible_host=$WORKER_1_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa
          k8s-worker-2 ansible_host=$WORKER_2_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa

          [all:vars]
          ansible_python_interpreter=/usr/bin/python3.8
          EOF

          echo "Ansible inventory file created:"
          cat ansible/inventory.ini

      - name: Inject SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$(terraform -chdir=terraform output -raw master_public_ip) echo "SSH Success"

      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml --extra-vars "dockerhub_email=${{ secrets.DOCKERHUB_EMAIL }} dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }} dockerhub_password=${{ secrets.DOCKERHUB_PASSWORD }}"


      - name: Cleanup tfvars
        run: rm -f terraform/terraform.tfvars

      - name: Cleanup SSH Key
        run: rm -f ~/.ssh/id_rsa

- hosts: all
  become: yes
  gather_facts: no

  pre_tasks:
    - name: Bootstrap Python 3.8 using raw command
      raw: |
        amazon-linux-extras enable python3.8
        yum clean metadata
        yum install -y python3.8
        ln -sf /usr/bin/python3.8 /usr/bin/python3
      register: python_install
      changed_when: true

    - name: Set Python 3.8 as the interpreter
      set_fact:
        ansible_python_interpreter: /usr/bin/python3.8

    - name: Manually gather facts using new interpreter
      setup:

  tasks:
    - name: Install Docker via raw command
      raw: yum install -y docker

    - name: Enable and start Docker
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Determine machine architecture
      command: uname -m
      register: architecture_info
      changed_when: false

    - name: Display architecture info
      debug:
        msg: >
          Detected architecture (uname -m): {{ architecture_info.stdout }}.
          Target ARCH for download: {% if architecture_info.stdout == 'x86_64' %}amd64{% elif architecture_info.stdout == 'aarch64' %}arm64{% else %}Unsupported/Unknown{% endif %}

    - name: Download kubectl
      shell: |
        ACTUAL_ARCH="{{ architecture_info.stdout }}"
        TARGET_ARCH=""
        if [ "${ACTUAL_ARCH}" = "x86_64" ]; then
          TARGET_ARCH="amd64"
        elif [ "${ACTUAL_ARCH}" = "aarch64" ]; then
          TARGET_ARCH="arm64"
        else
          echo "Unsupported architecture for kubectl: ${ACTUAL_ARCH}" >&2
          exit 1
        fi
        echo "Downloading kubectl for architecture: ${TARGET_ARCH}"
        K8S_STABLE_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
        curl -Lo ./kubectl "https://dl.k8s.io/release/${K8S_STABLE_VERSION}/bin/linux/${TARGET_ARCH}/kubectl"

    - name: Make kubectl executable
      shell: chmod +x ./kubectl

    - name: Move kubectl to /usr/local/bin
      shell: mv ./kubectl /usr/local/bin/kubectl

    - name: Download kind
      shell: |
        ACTUAL_ARCH="{{ architecture_info.stdout }}"
        TARGET_ARCH=""
        if [ "${ACTUAL_ARCH}" = "x86_64" ]; then
          TARGET_ARCH="amd64"
        elif [ "${ACTUAL_ARCH}" = "aarch64" ]; then
          TARGET_ARCH="arm64"
        else
          echo "Unsupported architecture: ${ACTUAL_ARCH}" >&2
          exit 1
        fi
        echo "Downloading kind for architecture: ${TARGET_ARCH}"
        curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.22.0/kind-linux-${TARGET_ARCH}"
      args:
        creates: ./kind
      register: download_kind_result

    - name: Make kind executable
      shell: chmod +x ./kind

    - name: Move kind to /usr/local/bin
      shell: mv ./kind /usr/local/bin/kind

    - name: Ensure /usr/local/bin is in PATH
      lineinfile:
        path: /etc/profile
        line: 'export PATH=$PATH:/usr/local/bin'
        state: present

    - name: Check if kind cluster already exists
      shell: kind get clusters | grep -q '^selenium-grid$'
      register: kind_cluster_exists
      ignore_errors: true
      changed_when: false
      failed_when: false
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin"

    - name: Create Kind cluster if it does not exist
      shell: kind create cluster --name selenium-grid
      when: kind_cluster_exists.rc != 0
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin"

    - name: Create directory for kubernetes manifests on EC2
      file:
        path: /home/ec2-user/kubernetes_manifests
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'

    - name: Copy Kubernetes manifest files to EC2
      copy:
        src: ../kubernetes/
        dest: /home/ec2-user/kubernetes_manifests/
        owner: ec2-user
        group: ec2-user
        mode: '0644'

    - name: Apply Selenium Hub Service
      shell: kubectl apply -f /home/ec2-user/kubernetes_manifests/selenium-hub-service.yml
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin"

    - name: Apply BDD Service Service
      shell: kubectl apply -f /home/ec2-user/kubernetes_manifests/bdd-service-service.yml
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin"

    - name: Apply Selenium Hub Deployment
      shell: kubectl apply -f /home/ec2-user/kubernetes_manifests/selenium-hub-deployment.yml
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin"

    - name: Apply Selenium Node Chrome Deployment
      shell: kubectl apply -f /home/ec2-user/kubernetes_manifests/selenium-node-chrome-deployment.yml
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin"

    - name: Apply BDD Service Deployment
      shell: kubectl apply -f /home/ec2-user/kubernetes_manifests/bdd-service-deployment.yml
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin"

    - name: List running Docker containers
      shell: docker ps




